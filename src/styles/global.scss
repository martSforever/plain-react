@import "./mixin/index";
@import "./theme";
@import "./component";

@function plVar($key) {
  @if (map_has_key($curTheme, $key)) {
    @return map-get($curTheme, $key);
  } @else {
    @return map-get($theme-default, $key);
  }
}

@mixin plThemeGenerator($theme,$appendDefaultTheme:true) {
  @if (length(map-keys($theme))>0 and $appendDefaultTheme) {
    $curThemes: map-merge($themes, $theme) !global;
  } @else {
    $curThemes: $theme !global;
  }
  @each $curThemeName, $curTheme in $curThemes {
    $curTheme: $curTheme !global;

    @if (str_length($curThemeName) >0) {
      .pl-theme-#{$curThemeName} {
        @content;
      }
    } @else {
      html {
        @content;
      }
    }
  }
}

@mixin plThemeWrap($theme) {
  @include plThemeGenerator($theme, true) {
    @content;
  }
}

@mixin plUseTheme($theme:()) {
  @include plThemeGenerator($theme, false) {
    @include component-mixin;
    @content;
  }
}

@mixin plColors {
  @each $key in (Primary, Success, Warn, Error, Info, Disabled) {

    $value: plVar(color#{$key}) !global;
    $color: plVar(color#{$key}) !global;
    $colorLight: plVar(color#{$key}Light) !global;
    $colorLighter: plVar(color#{$key}Lighter) !global;
    $colorDeep: plVar(color#{$key}Deep) !global;

    $key: to_lower_case($key) !global;

    @content;
  }
}

@mixin plShapes {
  @each $key in (None, Fillet, Round) {
    $value: plVar(border#{$key}) !global;
    $key: to_lower_case($key) !global;
    @content;
  }
}

@mixin plSizes {
  @each $key in (Large, Default, Small) {
    $value: plVar(size#{$key}) !global;
    $key: to_lower_case($key) !global;
    @content;
  }
}